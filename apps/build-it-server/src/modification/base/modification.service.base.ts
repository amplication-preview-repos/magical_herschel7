/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Modification as PrismaModification,
  Part as PrismaPart,
  User as PrismaUser,
} from "@prisma/client";

import { ModificationCreateInput } from "./ModificationCreateInput";

export class ModificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ModificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.modification.count(args);
  }

  async modifications(
    args: Prisma.ModificationFindManyArgs
  ): Promise<PrismaModification[]> {
    return this.prisma.modification.findMany(args);
  }
  async modification(
    args: Prisma.ModificationFindUniqueArgs
  ): Promise<PrismaModification | null> {
    return this.prisma.modification.findUnique(args);
  }
  async createModification(
    args: Prisma.ModificationCreateArgs
  ): Promise<PrismaModification> {
    return this.prisma.modification.create(args);
  }
  async updateModification(
    args: Prisma.ModificationUpdateArgs
  ): Promise<PrismaModification> {
    return this.prisma.modification.update(args);
  }
  async deleteModification(
    args: Prisma.ModificationDeleteArgs
  ): Promise<PrismaModification> {
    return this.prisma.modification.delete(args);
  }

  async getPart(parentId: string): Promise<PrismaPart | null> {
    return this.prisma.modification
      .findUnique({
        where: { id: parentId },
      })
      .part();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.modification
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async CreateModification(
    args: ModificationCreateInput
  ): Promise<ModificationCreateInput> {
    throw new Error("Not implemented");
  }
}
