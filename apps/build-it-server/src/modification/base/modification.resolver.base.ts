/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Modification } from "./Modification";
import { ModificationCountArgs } from "./ModificationCountArgs";
import { ModificationFindManyArgs } from "./ModificationFindManyArgs";
import { ModificationFindUniqueArgs } from "./ModificationFindUniqueArgs";
import { CreateModificationArgs } from "./CreateModificationArgs";
import { UpdateModificationArgs } from "./UpdateModificationArgs";
import { DeleteModificationArgs } from "./DeleteModificationArgs";
import { Part } from "../../part/base/Part";
import { User } from "../../user/base/User";
import { ModificationCreateInput } from "./ModificationCreateInput";
import { ModificationService } from "../modification.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Modification)
export class ModificationResolverBase {
  constructor(
    protected readonly service: ModificationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Modification",
    action: "read",
    possession: "any",
  })
  async _modificationsMeta(
    @graphql.Args() args: ModificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Modification])
  @nestAccessControl.UseRoles({
    resource: "Modification",
    action: "read",
    possession: "any",
  })
  async modifications(
    @graphql.Args() args: ModificationFindManyArgs
  ): Promise<Modification[]> {
    return this.service.modifications(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Modification, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Modification",
    action: "read",
    possession: "own",
  })
  async modification(
    @graphql.Args() args: ModificationFindUniqueArgs
  ): Promise<Modification | null> {
    const result = await this.service.modification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Modification)
  @nestAccessControl.UseRoles({
    resource: "Modification",
    action: "create",
    possession: "any",
  })
  async createModification(
    @graphql.Args() args: CreateModificationArgs
  ): Promise<Modification> {
    return await this.service.createModification({
      ...args,
      data: {
        ...args.data,

        part: args.data.part
          ? {
              connect: args.data.part,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Modification)
  @nestAccessControl.UseRoles({
    resource: "Modification",
    action: "update",
    possession: "any",
  })
  async updateModification(
    @graphql.Args() args: UpdateModificationArgs
  ): Promise<Modification | null> {
    try {
      return await this.service.updateModification({
        ...args,
        data: {
          ...args.data,

          part: args.data.part
            ? {
                connect: args.data.part,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Modification)
  @nestAccessControl.UseRoles({
    resource: "Modification",
    action: "delete",
    possession: "any",
  })
  async deleteModification(
    @graphql.Args() args: DeleteModificationArgs
  ): Promise<Modification | null> {
    try {
      return await this.service.deleteModification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Part, {
    nullable: true,
    name: "part",
  })
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "read",
    possession: "any",
  })
  async getPart(@graphql.Parent() parent: Modification): Promise<Part | null> {
    const result = await this.service.getPart(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Modification): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ModificationCreateInput)
  async CreateModification(
    @graphql.Args()
    args: ModificationCreateInput
  ): Promise<ModificationCreateInput> {
    return this.service.CreateModification(args);
  }
}
