/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PartService } from "../part.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PartCreateInput } from "./PartCreateInput";
import { Part } from "./Part";
import { PartFindManyArgs } from "./PartFindManyArgs";
import { PartWhereUniqueInput } from "./PartWhereUniqueInput";
import { PartUpdateInput } from "./PartUpdateInput";
import { ModificationFindManyArgs } from "../../modification/base/ModificationFindManyArgs";
import { Modification } from "../../modification/base/Modification";
import { ModificationWhereUniqueInput } from "../../modification/base/ModificationWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PartControllerBase {
  constructor(
    protected readonly service: PartService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Part })
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPart(@common.Body() data: PartCreateInput): Promise<Part> {
    return await this.service.createPart({
      data: {
        ...data,

        carModel: data.carModel
          ? {
              connect: data.carModel,
            }
          : undefined,
      },
      select: {
        carModel: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Part] })
  @ApiNestedQuery(PartFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async parts(@common.Req() request: Request): Promise<Part[]> {
    const args = plainToClass(PartFindManyArgs, request.query);
    return this.service.parts({
      ...args,
      select: {
        carModel: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Part })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async part(
    @common.Param() params: PartWhereUniqueInput
  ): Promise<Part | null> {
    const result = await this.service.part({
      where: params,
      select: {
        carModel: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Part })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePart(
    @common.Param() params: PartWhereUniqueInput,
    @common.Body() data: PartUpdateInput
  ): Promise<Part | null> {
    try {
      return await this.service.updatePart({
        where: params,
        data: {
          ...data,

          carModel: data.carModel
            ? {
                connect: data.carModel,
              }
            : undefined,
        },
        select: {
          carModel: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Part })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePart(
    @common.Param() params: PartWhereUniqueInput
  ): Promise<Part | null> {
    try {
      return await this.service.deletePart({
        where: params,
        select: {
          carModel: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/modifications")
  @ApiNestedQuery(ModificationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Modification",
    action: "read",
    possession: "any",
  })
  async findModifications(
    @common.Req() request: Request,
    @common.Param() params: PartWhereUniqueInput
  ): Promise<Modification[]> {
    const query = plainToClass(ModificationFindManyArgs, request.query);
    const results = await this.service.findModifications(params.id, {
      ...query,
      select: {
        createdAt: true,
        dateModified: true,
        description: true,
        id: true,

        part: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/modifications")
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "update",
    possession: "any",
  })
  async connectModifications(
    @common.Param() params: PartWhereUniqueInput,
    @common.Body() body: ModificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifications: {
        connect: body,
      },
    };
    await this.service.updatePart({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/modifications")
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "update",
    possession: "any",
  })
  async updateModifications(
    @common.Param() params: PartWhereUniqueInput,
    @common.Body() body: ModificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifications: {
        set: body,
      },
    };
    await this.service.updatePart({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/modifications")
  @nestAccessControl.UseRoles({
    resource: "Part",
    action: "update",
    possession: "any",
  })
  async disconnectModifications(
    @common.Param() params: PartWhereUniqueInput,
    @common.Body() body: ModificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifications: {
        disconnect: body,
      },
    };
    await this.service.updatePart({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/part")
  @swagger.ApiOkResponse({
    type: PartCreateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreatePart(
    @common.Body()
    body: PartCreateInput
  ): Promise<PartCreateInput> {
    return this.service.CreatePart(body);
  }
}
