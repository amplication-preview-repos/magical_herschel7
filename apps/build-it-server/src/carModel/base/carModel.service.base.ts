/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CarModel as PrismaCarModel,
  Part as PrismaPart,
} from "@prisma/client";
import { CarModelCreateInput } from "./CarModelCreateInput";

export class CarModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CarModelCountArgs, "select">): Promise<number> {
    return this.prisma.carModel.count(args);
  }

  async carModels(
    args: Prisma.CarModelFindManyArgs
  ): Promise<PrismaCarModel[]> {
    return this.prisma.carModel.findMany(args);
  }
  async carModel(
    args: Prisma.CarModelFindUniqueArgs
  ): Promise<PrismaCarModel | null> {
    return this.prisma.carModel.findUnique(args);
  }
  async createCarModel(
    args: Prisma.CarModelCreateArgs
  ): Promise<PrismaCarModel> {
    return this.prisma.carModel.create(args);
  }
  async updateCarModel(
    args: Prisma.CarModelUpdateArgs
  ): Promise<PrismaCarModel> {
    return this.prisma.carModel.update(args);
  }
  async deleteCarModel(
    args: Prisma.CarModelDeleteArgs
  ): Promise<PrismaCarModel> {
    return this.prisma.carModel.delete(args);
  }

  async findParts(
    parentId: string,
    args: Prisma.PartFindManyArgs
  ): Promise<PrismaPart[]> {
    return this.prisma.carModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .parts(args);
  }
  async CreateCarModel(
    args: CarModelCreateInput
  ): Promise<CarModelCreateInput> {
    throw new Error("Not implemented");
  }
}
